Comparison sorts,,,,,,,
Name,Best,Average,Worst,Memory,Stable,Method,Other notes
Tournament sort,—,,,[4], ?,Selection,
Strand sort,n,n^2,n^2,n,Yes,Selection,
Smoothsort,n,n \log n,n \log n,1,No,Selection,"An adaptive sort:  comparisons when the data is already sorted, and 0 swaps."
Selection sort,n^2,n^2,n^2,1,No,Selection,"Stable with O(n) extra space, for example using lists.[3]"
Heapsort,n \log n,n \log n,n \log n,1,No,Selection,
Introsort,n \log n,n \log n,n \log n,\log n,No,Partitioning & Selection,Used in several STL implementations.
Quicksort,n \log n,n \log n,n^2," on average, worst case is ; Sedgewick variation is  worst case",typical in-place sort is not stable; stable versions exist,Partitioning,"Quicksort is usually done in place with O(log n) stack space.[citation needed] Most implementations are unstable, as stable in-place partitioning is more complex. Naïve variants use an O(n) space array to store the partition.[citation needed] Quicksort variant using three-way (fat) partitioning takes O(n) comparisons when sorting an array of equal keys."
Merge sort,n \log n,n \log n,n \log n, worst case,Yes,Merging,"Highly parallelizable (up to O(log n) using the Three Hungarian's Algorithm[clarification needed] or, more practically, Cole's parallel merge sort) for processing large amounts of data."
In-place merge sort,—,—,n \log^2 n,1,Yes,Merging,Can be implemented as a stable sort based on stable in-place merging.[2]
Patience sorting,—,—,n \log n,n,No,Insertion & Selection,Finds all the longest increasing subsequences in O(n log n).
Timsort,n,n \log n,n \log n,n,Yes,Insertion & Merging,Makes n comparisons when the data is already sorted or reverse sorted.
Block sort,n,n \log n,n \log n,1,Yes,Insertion & Merging,Combine a block-based O(n) in-place merge algorithm[7] with a bottom-up merge sort.
Shell sort,n,or,"Depends on gap sequence;
best known is ",1,No,Insertion,"Small code size, no use of call stack, reasonably fast, useful where memory is at a premium such as embedded and older mainframe applications."
Library sort,—,n \log n,n^2,n,Yes,Insertion,
Insertion sort,n,n^2,n^2,1,Yes,Insertion,"O(n + d),[clarification needed] where d is the number of inversions."
Cycle sort,—,n^2,n^2,1,No,Insertion,In-place with theoretically optimal number of writes.
Binary tree sort,n,n \log n,n \log n (balanced),n,Yes,Insertion,When using a self-balancing binary search tree.
Gnome sort,n,n^2,n^2,1,Yes,Exchanging,Tiny code size.
Comb sort,n,n \log n,n^2,1,No,Exchanging,Small code size.
Cocktail sort,n,n^2,n^2,1,Yes,Exchanging,
Bubble sort,n,n^2,n^2,1,Yes,Exchanging,Tiny code size.
UnShuffle Sort[5],kN,kN,kN,In place for linked lists. N*sizeof(link) for array.,Can be made stable by appending the input order to the key.,Distribution and Merge,No exchanges are performed. Performance is independent of data size. The constant 'k' is proportional to the entropy in the input. K = 1 for ordered or ordered by reversed input so runtime is equivalent to checking the order O(N).
Franceschini's method[6],—,n \log n,n \log n,1,Yes,?,
,,,,,,,
Non-comparison sorts,,,,,,,
Name,Best,Average,Worst,Memory,Stable,n << 2k,Notes
Pigeonhole sort,—,n + 2^k,n + 2^k,2^k,Yes,Yes,
LSD Radix Sort,—,n \cdot \frac{k}{d},n \cdot \frac{k}{d},n,Yes,No,[8][9]
MSD Radix Sort (in-place),—,n \cdot \frac{k}{d},n \cdot \frac{k}{d},\frac{k}{d} \cdot 2^d,No,No," recursion levels, 2d for count array."
Bucket sort (uniform keys),—,n+k,n^2 \cdot k,n \cdot k,Yes,No,Assumes uniform distribution of elements from the domain in the array.[8]
Spreadsort,—,n \cdot \frac{k}{d},n \cdot \left( {\frac{k}{s} + d} \right),\frac{k}{d} \cdot 2^d,No,No,"Asymptotics are based on the assumption that n << 2k, but the algorithm does not require this."
Counting sort,—,n+r,n+r,n+r,Yes,Yes,"If r is O(n), then Average is O(n).[8]"
Bucket sort (integer keys),—,n+r,n+r,n+r,Yes,Yes,"If r is O(n), then Average is O(n).[9]"
MSD Radix Sort,—,n \cdot \frac{k}{d},n \cdot \frac{k}{d},n + \frac{k}{d} \cdot 2^d,Yes,No,Stable version uses an external array of size n to hold all of the bins.
,,,,,,,
Name,Best,Average,Worst,Memory,Stable,Comparison,Other notes
Spaghetti (Poll) sort,n,n,n,n^2,Yes,Polling,"This a linear-time, analog algorithm for sorting a sequence of items, requiring O(n) stack space, and the sort is stable. This requires nparallel processors. See Spaghetti sort#Analysis."
Sorting networks,\log n,\log n,\log n,n \log n,Varies (stable sorting networks require more comparisons),Yes,Order of comparisons are set in advance based on a fixed network size. Impractical for more than 32 items.
Simple pancake sort,—,n,n,\log n,No,Yes,Count is number of flips.
Bead sort,—,N/A,N/A,—,N/A,No,Requires specialized hardware.
